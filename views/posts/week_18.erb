date: 2014-03-14
title: "Contributing to an Open Source Project, Part the First"

<div class="posts">
  <h1>Contributing to an Open Source Project, Part the First</h1><hr>
  <p>
    Last Tuesday, the folks at Seattle.rb announced they had a few <a href='https://github.com/seattlerb/seattlerb.org/issues?labels=Help+Seattle.rb'>issues</a> with their <a href="http://seattlerb.org">website</a>, and invited those there to help resolve them as a way of giving back to the community.  Looking over the list, many of the issues seemed very similar to the tasks of a <a href='https://github.com/Ada-Developers-Academy/daily-curriculum/blob/master/week14/p_patch_planner.md'>recent project</a> we had done in class. Figuring that practice could only make <strike>perfect</strike> permament, I decided to have a go, and chose a relatively easy feature: showing past talks.  Having built plenty of index pages in Rails before, I figured I could hack it out pretty quickly.
  </p>
  <p>
    Well. It job was trickier than anticipated, for many reasons.  And I realized that there is a lot more pressure when working on someone else's actual production code -- outside of the warm, nurturing nest of ADA, where it's cold and full of hardened, weathered old birds.I quickly ran into a number of problems, but for now I wanted to talk about:
  </p>

  <h2>Managing Different Versions of Ruby (on Macs)</h2>
  <p>
    The first major issue was that the versions of pretty much everything they were using was outdated.  After cloning the repo onto my local machine and trying to open it, I got the following message in my terminal:
  </p>
  <p>
    <code>
      ruby-1.9.2-p180 is not installed.<br>
      To install do: 'rvm install ruby-1.9.2-p180'
    </code>
  </p>
  <p>
    Since my local machine only had Ruby 2.0.0 installed, it wasn't able to do anything with the application.  My first instinct was to just upgrade the application to the current version of Ruby, which actually was 2.1.1. Which I did.  Being a noob, I was at first concerned that this would override my old version of Ruby which all my projects depended on, but thanks to <a href="https://rvm.io/">Ruby Version Manager</a> that wasn't an issue. However, <em>using</em> the newer version of Ruby led to a bunch of other issues I will get into later, but to stick to the topic, this is NOT the best way to go about dealing with legacy code.  Moral: Don't go updating versions of things willy-nilly. Dependencies are a thing.  But more on that later.
  </p>
  <p>
    So. I downloaded ruby 1.9.2, and tried to open the directory.  And...same error! What was going on? It turns out that even though you have all the correct versions of Ruby on your machine, you still have to specify which one to use if a project doens't use your machine's default version.  To view all your versions, in your command line type:
  </p>
  <p><code>
    rvm list
  </code></p>
    <p>For me, this gave me:</p>

  <p><code>
    rvm rubies<br><br>

    &nbsp;&nbsp;ruby-1.9.2-p320 [ x86_64 ]<br>
  * ruby-2.0.0-p247 [ x86_64 ]<br>
    &nbsp;&nbsp;ruby-2.1.1 [ x86_64 ]<br><br>

    # => - current<br>
    # =* - current && default<br>
    #  * - default<br>
  </code></p>

  <p>Then to select the one you want to use, type:</p>

  <p><code>
    rvm use 1.9.2
  </code></p>
  <p>or simply:</p>
  <p><code>
    rvm 1.9.2
  </code></p>

  <p><strong>NOTE:</strong><br>
   A potential 'gotcha' with this is that sometimes you have to specify the patch version as well--that is, if you don't have the latest patched version of a major version.  For example, if I type in <code>rvm 2.0.0</code>, I get the following error:</p>
  <p>
    <code>
      ruby-2.0.0-p451 is not installed.<br>
      To install do: 'rvm install ruby-2.0.0-p451'
    </code>
  </p>
  <p>
    Since I only have ruby-2.0.0-p247, I have to actually specify <code>rvm 2.0.0-p247</code> in order for my terminal to not get mad at me.
  </p>
  <p>
    Okay. So now that my local machine knows what version of Ruby to deal with, how did my app know which version it wanted to use in the first place so it knew how to scold my computer? This brings us to:
  </p>

  <h2>Managing Different Versions of Ruby (in Rails)</h2>
  <p>
    Cleverly enough, Rails has its own ways of dealing with different versions of Ruby.  Since I had been operating in the cushy, exclusive world of Ruby 2.0.0 and Rails 4, I never really had to think about any of that stuff. Now that I was being confronted with Ruby 1.9.2 (gasp!) and Rails 3.1.0 (double gasp!), I had to learn about different compatibility issues.
  </p>
  <p>
    In older versions of Rails, there is a <code>.rvmrc</code> file in the root directory that specifies which version of Ruby the application uses.  In the seattlerb.org directory, sure enough there was this file, which contained:
  </p>

  <p>
    <code>rvm 1.9.2-p180@heroku-cedar</code>
  </p>
  <p>
    In later versions, this file got changed to <code>.ruby-version</code>.
    (For more on this, check out <a href='http://danielsellergren.com/what-is-ruby_version-file-how-does-it-differ-from-rvmrc/'>this</a> blog post).
  </p>
  <p>
    However, neither of these is necessary now thanks to <a href='http://bundler.io/v1.2/whats_new.html'>Bundler!</a> Rather than dealing with separate hidden files, all you have to do in your Gemfile is say:
  </p>

  <p>
    <code>
      source "https://rubygems.org"<br>
      &nbsp;&nbsp;ruby '1.9.2'<br>
      &nbsp;&nbsp;<em>(other gems go here)</em><br>
      &nbsp;&nbsp;...
    </code>
  </p>

  <p>
    Then <code>bundle</code> as usual and <em>voil√†!</em> Your Rails app now knows what Ruby version to use.  Which brings us to the final point, which is:
  </p>
  <h2>What the heck is Bundler, anyway?</h2>
  <p>
    I'd been running <code>bundle install</code> and <code>bundle update</code> so often that it's become almost* muscle memory.  But I never really understood what it did.  In fact, the <a href='https://github.com/Ada-Developers-Academy/daily-curriculum/blob/master/week04/friday/sinatra-practice.md'>first time we were taught about bundling</a>, we were explicitly told, and I quote:<blockquote>"Don't worry about the Gemfile, this part is still magic, we'll get into that in another lesson."</blockquote>

    So, with all this version stuff, it finally became clear to me what bundler does. Stepping back a bit: When I first changed my version of Ruby in my terminal, I tried to run some gem--probably rubocop or flog or somesuch.  And lo and behold, I got the error:
  </p>
  <p><code>-bash: rubocop: command not found</code></p>
  <p>
    And that is how I learned that any gems you install on your machine are specific to the version of Ruby you are using at the time. Which means anytime you update your Ruby version, you have to update your gems as well.  The important thing is you do NOT want to use <code>sudo gem install</code>, because that will override all versions of your gem, and you'll get compatibility issues if you use the wrong version of Ruby or other gems that have dependencies. (For more details, read <a href='https://rvm.io/rubies/rubygems'>this</a>).
  </p>
  <p>
    So what bundler does is it specifies which gems (and more importantly, their versions) to use in your current directory.  Basically, it creates walls around your app so that you don't have to worry about all the compatibility and dependency problems that come with having different versions of things installed.
  </p>
  <p>There. Not that magic, after all.</p>

  <div class="footnote">*almost. There are always those frustrating times when I forget the simplest, most obvious things like bundle or rake db:migrate and so forth.  I can only assume these lapses will get more infrequent with experience. But then again, maybe not.</div>
<hr>
<h3>Further reading</h3>
  <ul>
    <li><a href='http://bundler.io/v1.5/gemfile.html'>Bundling your Gemfile</a></li>
    <li><a href= 'https://devcenter.heroku.com/articles/ruby-versions'> What Heroku says about specifying Ruby versions</a></li>
    <li><a href="http://railsapps.github.io/managing-rails-versions-gems.html">Managing Rails versions and Gems</a></li>
  </ul>
</div>

