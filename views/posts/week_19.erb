date: 2014-03-23
title: "Contributing to an Open Source Project, Part the Second"

<div class="posts">
  <h1>Contributing to an Open Source Project, Part the Second</h1><hr>
  <p>
    A few things I learned about contributing to open source:
    <ol>
      <li><strong>Commit early and often.</strong> Too often when coding, I find myself so much in the zone that by the time I've realized I hadn't made any commits yet I've changed a bunch of different unrelated issues across multiple files.   However, having clearly organized steps to trace back changes makes it easier for other humans to review.
      </li>
      <li><strong>Make small pull requests.</strong> An extension of the first item, addressing only a single issue in a pull request makes your code easier to review and accept. It's easy to get carried away with wanting to fix everything at once, but again--open source projects are a community effort, and as such, any changes need to be as bite-sized as possible.
      </li>
      <li><strong>Proofread, proofread, proofread.</strong> For many of the projects we've built in ADA, it's easy to be careless or undisciplined about code style. However, even careless comments or vestiges of abandoned code can be confusing, and add to code noise. I ended up refactoring my pull request over and over again, and it not only made my code better and smarter, it actually was kind of <a href='http://kytrinyx.com/talks/therapeutic-refactoring'>therapeutic</a>.
      </li>
      <li><strong>Thicken your skin.</strong> Because here's the sad truth: my first experience contributing to open source, to put it bluntly, sucked. <em>[Warning: The following may contain Feelings]</em> I spent a significant number of hours working on the project in my non-existent spare time, once even staying until almost 11pm in the office, and ultimately it was rejected. And while I was prepared to handle rejection, I was not prepared for the manner in which it was rejected. To be fair, much of the feedback I got on my PR was helpful and made me grow up a lot as a coder. However, there was also feedback that came across as quite condescending, and made me feel incredibly unwelcome.
      </li>
    </ol>
  </p>
  <p>
    My background was, like the rest of the ADA cohort, not computer science, or anything tech-related. I majored in the fine arts, where the mindset of creating high quality work is markedly different from that of skilled programmers.  Not that there aren't similarities--there is certainly an aesthetic that exists in the psychological landscape of both artists and programmers. But the main difference is that oftentimes, an integral part of what makes great art is that it somehow reflects human civility, and grace. And that is the part I miss the most now that I'm in the tech world. I was recently asked the following:
  </p>

  <p><cite>
    One thing that interests me is the notion of making programming accessible to non-programmers. I'm not talking about ... ways to make it a little easier to learn. Rather, what would "programming" look like if it wasn't always invented and furthered by programmers? Could it look like poetry? Could it feel like firing a clay pot?
  </cite></p>

  <p>
    Many artists speak of putting themselves into their work, embuing their music or painting or dance with their better selves.
  </p>
  <h3>Further reading</h3>
  <ul>
    <li><a href='https://github.com/bbatsov/ruby-style-guide'>Ruby Style Guide</a></li>
    <li><a href='http://lostechies.com/derickbailey/2012/12/14/dear-open-source-project-leader-quit-being-a-jerk/'>Derick Bailey is Nice, and So We Should Be Nice</a></li>
    <li><a href='http://blog.valerieaurora.org/2011/05/20/on-the-necessity-of-assholes/'>Valerie Aurora on the Necessity of A**holes</a></li>
    <li><a href='http://www.paulgraham.com/hp.html'>Paul Graham on Hackers and Painters</a></li>

</div>