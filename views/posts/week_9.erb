date: 2014-01-12
title: "In which things heard the first time are heard for the first time"

<div class="posts">

  <h1>In which H revisits week 3</h1>

  <p>Once upon a time, a seemingly long, long time ago which turns out actually wasn't all that long ago, there was a project called Farmers' Market Finder, affectionately known as far_mar_finder.  It was the first real Ruby project that we'd had as newly-forged Adies, and I remember it fondly as the first time Ruby really started to click.  I felt pretty fancy learning all this code stuff, what with Manipulating Arrays and Sorting Hashes by Key Values and all manner of shiny things.  We were asked to write various class methods and instances methods and it was all a Rather Big Deal.</p>

  <p>Fast forward six weeks. Now with six more or less functional Ruby on Rails apps under my belt, I went back and looked at far_mar_finder, mostly just to look up something about writing rspecs.  At the time, the rspec files had been provided for us, and we had only to run the rspec command in our terminal. I remembered having a decent understanding of it, but wanted to go back and look. One thing lead to another and I found myself perusing the code I had written all those weeks ago. We had to create classes for four different CSV files containing various categories of data, methods to find them by id or attribute, methods to return the things from another csv file associated with that one, etc etc, when suddenly it hit me.</p>

  <p><strong>THESE WERE ALL ACTIVERECORD METHODS!</strong></p>

  <p>Approximately 9 billion things fell into place.  What struck me most was the irony of the realization, since I had been starting to feel like Rails was not requiring me to do a whole lot of complicated Ruby.  Turns out I kind of already did some of the heaviest lifting already, and they were for functionalities so common to any Rails model that they decided to just hand them to us pre-packaged via ActiveRecord.</p>

  <h1>In which H remembers something about tomatoes</h1>

  <p>As it turns out, coding can be extremely, extremely time consuming.  I'd even go as far as saying it is addicting, the way video games or extreme sports and probably recreational drugs are addicting. With each week, I found myself spending more and more hours outside of class coding.  I'd forget to take breaks, get up and walk around, eat, go to the bathroom, wipe off the drool pooling under my chin.</p>

  <p>As it also turns out, forgetting to do these things is not really good for you.</p>

  <p>In another flash of retrospective lightning, I remembered all the talk about coding culture from week 1.  There was something about the Pomodoro timer, and burnout, and darker screen settings, and all those other little things to help codemonkeys remember to stay humans.  Back then, I probably rolled my eyes and thought that it was all just part of the introductory bafflegabbing that comes with any kind of program orientation. "Pomodoro timer," scoffed Week-One-H. "What a silly idea. As if I need some tomato to tell me to turn off my computer, much less an <em>Italian</em> one."</p>

  <p>Now, many, many hours of sleep deprivation and eyestrain later, I am practically desperate for something that will physically drag me away from my screen at designated times, and tell my brain to stop thinking about code for at least 5 minutes per hour.  I would pay money for someone to do this.  I'd write an app for it, but somehow that seems even more ironic.</p>

  <h1>In which a laptop sticker finally makes sense</h1>

  <p>When I got into ADA, a donor generously provided me with a used laptop to use for the program.  Like any good hipster laptop, it was adorned with various stickers, including one that read "I &#9829; APIs".  For the longest time, I felt like a fraud anytime I opened my computer around other programmers and displayed this sticker, because I had absolutely no clue what an API was.  More frustrasting still was, when I looked up what the acronym stood for (Application Programming Interface), I could understand each word individually, but still had no idea what it meant. 
  </p>

  <p>Then, a friend of mine, who is also a Ruby developer, decided to give me a project to work on to help me understand what real coders do Out In The Wild.  "We need to convert the old API into a new one," he informed me.  I felt betrayed, exposed by my laptop sticker.  I decided it was time I figured out what an API meant.  
  </p>

  <p>To aid in this, I decided to implement Ruby gems into my week 9 project (raindrops-on-roses.herokuapp.com) that called on various APIs (keep in mind at this point, I still had only the mossiest of ideas about what one was).  It helped to know that a few other Adies had used the Google Book API in their personal project over Christmas break.  After a lot of chatting with computer folks and implementing four gems that accessed various APIs, I finally have a mostly un-mossified idea of what an API is, what a gem is, and how to possibly write my own.  Not bad for just over two months.
  </p>

</div>
