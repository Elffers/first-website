date: 2014-03-14
title: "Contributing to an Open Source Project, Part the First"

<div class="posts">
<h1>"In which H ventures out of the nest"</h1>
  <p>
    Last Tuesday, the folks at Seattle.rb announced they had a few <a href='https://github.com/seattlerb/seattlerb.org/issues?labels=Help+Seattle.rb'>issues</a> with their <a href="seattlerb.org">website</a>, and invited those there to help resolve them as a way of giving back to the community.  Looking over the list, many of the issues seemed very similar to the tasks of a <a href='https://github.com/Ada-Developers-Academy/daily-curriculum/blob/master/week14/p_patch_planner.md'>recent project</a> we had done in class. Figuring that practice could only make <strike>perfect</strike> permament, I decided to have a go, and chose a relatively easy feature: showing past talks.  Having built plenty of index pages in Rails before, I figured I could hack it out pretty quickly.
  </p>
  <p>
    Well. It job was trickier than anticipated, for many reasons.  And I realized that there is a lot more pressure when working on someone else's actual production code -- outside of the warm, nurturing nest of ADA, where it's cold and full of hardened, weathered old birds.I quickly ran into a number of problems, but for now I wanted to talk about:
  </p>

  <h2>Lesson #1: Managing Different Versions of Ruby</h2>
  <p>
    The first major issue was that the versions of pretty much everything they were using was outdated.  After cloning the repo onto my local machine and trying to open it, I got the following message in my terminal:
  </p>
  <p>
    <code>
      ruby-1.9.2-p180 is not installed.<br>
      To install do: 'rvm install ruby-1.9.2-p180'
    </code>
  </p>
  <p>
    Since my local machine only had Ruby 2.0.0 installed, it wasn't able to do anything with the application.  My first instinct was to just upgrade the application to the current version of Ruby, which actually was 2.1.1. Which I did.  Being a noob, I was at first concerned that this would override my old version of Ruby which all my projects depended on, but thanks to <a href="https://rvm.io/">Ruby Version Manager</a> that wasn't an issue. However, <em>using</em> the newer version of Ruby led to a bunch of other issues I will get into later, but to stick to the topic, this is NOT the best way to go about dealing with legacy code.  Moral: Don't go updating versions of things willy-nilly. Dependencies are a thing.  But more on that later. <!-- TODO: link to post about gemfile dependencies -->
  </p>
  <p>
    So. I downloaded ruby 1.9.2, and tried to open the directory.  And...same error! What was going on? It turns out that even though you have all the correct versions of Ruby on your machine, you still have to specify which one to use if a project doens't use your machine's default version.  To view all your versions, in your command line type:
  </p>
  <p><code>
    rvm list
  </code></p>
    <p>For me, this gave me:</p>

  <p><code>
    rvm rubies<br><br>

    &nbsp;&nbsp;ruby-1.9.2-p320 [ x86_64 ]<br>
  * ruby-2.0.0-p247 [ x86_64 ]<br>
    &nbsp;&nbsp;ruby-2.1.1 [ x86_64 ]<br><br>

    # => - current<br>
    # =* - current && default<br>
    #  * - default<br>
  </code></p>

  <p>Then to select the one you want to use, type:</p>

  <p><code>
    rvm use 1.9.2
  </code></p>
  <p>or simply:</p>
  <p><code>
    rvm 1.9.2
  </code></p>

  <p>A potential 'gotcha' with this is that sometimes you have to specify the patch version as well--that is, if you don't have the latest patched version of a major version.  For example, if I type in <code>rvm 2.0.0</code>, I get the following error:</p>
  <p>
    <code>
      ruby-2.0.0-p451 is not installed.<br>
      To install do: 'rvm install ruby-2.0.0-p451'
    </code>
  </p>
  <p>
    Since I only have ruby-2.0.0-p247, I have to actually specify <code>rvm 2.0.0-p247</code> in order for my terminal to not get mad at me.
  </p>

  <p>
    In older versions of Rails,
  </p>

  <p>
    rvm 1.9.2-p180@heroku-cedar
  </p>

</div>

resources
http://bundler.io/v1.5/gemfile.html
http://stackoverflow.com/questions/5864825/controlling-ruby-version-used-in-rails
http://railsapps.github.io/managing-rails-versions-gems.html